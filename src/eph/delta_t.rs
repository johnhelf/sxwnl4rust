/// DeltaT计算表
const DT_AT: [(i32, f64, f64, f64, f64); 23] = [
    (-4000, 108371.7, -13036.80, 392.000, 0.0000),
    (-500, 17201.0, -627.82, 16.170, -0.3413),
    (-150, 12200.6, -346.41, 5.403, -0.1593),
    (150, 9113.8, -328.13, -1.647, 0.0377),
    (500, 5707.5, -391.41, 0.915, 0.3145),
    (900, 2203.4, -283.45, 13.034, -0.1778),
    (1300, 490.1, -57.35, 2.085, -0.0072),
    (1600, 120.0, -9.81, -1.532, 0.1403),
    (1700, 10.2, -0.91, 0.510, -0.0370),
    (1800, 13.4, -0.72, 0.202, -0.0193),
    (1830, 7.8, -1.81, 0.416, -0.0247),
    (1860, 8.3, -0.13, -0.406, 0.0292),
    (1880, -5.4, 0.32, -0.183, 0.0173),
    (1900, -2.3, 2.06, 0.169, -0.0135),
    (1920, 21.2, 1.69, -0.304, 0.0167),
    (1940, 24.2, 1.22, -0.064, 0.0031),
    (1960, 33.2, 0.51, 0.231, -0.0109),
    (1980, 51.0, 1.29, -0.026, 0.0032),
    (2000, 63.87, 0.1, 0.0, 0.0),
    (2005, 64.7, 0.21, 0.0, 0.0),
    (2012, 66.8, 0.22, 0.0, 0.0),
    (2018, 69.0, 0.36, 0.0, 0.0),
    (2028, 72.6, 0.0, 0.0, 0.0),
];

/// 二次曲线外推计算
pub fn dt_ext(y: f64, jsd: f64) -> f64 {
    let dy = (y - 1820.0) / 100.0;
    -20.0 + jsd * dy * dy
}

/// 计算TD-UT的时间差
pub fn dt_calc(y: f64) -> f64 {
    // 获取表中最后两年的数据
    let y0 = DT_AT[DT_AT.len() - 2].0 as f64;
    let t0 = DT_AT[DT_AT.len() - 1].1;

    // 超过表中的计算范围则外推
    if y >= y0 {
        let jsd = 31.0; // 瑞士星历表jsd=31
        if y > y0 + 100.0 {
            return dt_ext(y, jsd);
        }
        let v = dt_ext(y, jsd);
        let dv = dt_ext(y0, jsd) - t0;
        return v - dv * (y0 + 100.0 - y) / 100.0;
    }

    // 查找分段
    let mut i = 0;
    while i < DT_AT.len() && y >= DT_AT[i].0 as f64 {
        i += 5;
    }
    i -= 5;

    // 计算时间差值(以10年为单位)
    let t1 = (y - DT_AT[i].0 as f64) / (DT_AT[i + 5].0 as f64 - DT_AT[i].0 as f64) * 10.0;
    let t2 = t1 * t1;
    let t3 = t2 * t1;

    DT_AT[i].1 + DT_AT[i].2 * t1 + DT_AT[i].3 * t2 + DT_AT[i].4 * t3
}

/// 计算力学时和世界时的差值
pub fn dt_t(t: f64) -> f64 {
    dt_calc(t / 365.2425 + 2000.0) / 86400.0
}
